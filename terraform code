provider  "aws" {
region  = "ap-south-1"
profile = "terraform"
}

// The name of the algorithm to use for the key. Currently-supported values are "RSA" and "ECDSA"....
// algorith is required for tls_private_key option...

resource "tls_private_key" "terra_key" {
  algorithm   = "RSA"
  }


// Generates a local file with the given content....
// filename - (Required) The path of the file to create....

resource "local_file" "terra_file" {
    filename = "MyTerraKey.pem"
}

// Provides an EC2 key pair resource. A key pair is used to control login access to EC2 instances.

resource "aws_key_pair" "terra_key_pair" {
  key_name   = "MyTerraKey"
  public_key = tls_private_key.terra_key.public_key_openssh  
}


//Provides an EC2 instance resource. This allows instances to be created, updated, and deleted

resource "aws_instance"  "terra1" {
  ami           = "ami-0447a12f28fddb066"
  instance_type = "t2.micro"
  key_name	=  aws_key_pair.terra_key.key_name
  security_groups =  [ "default" ] 
  
connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = tls_private_key.terra_key.private_key_pem
    host     = aws_instance.terra1.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      " sudo su",
      " yum install httpd  php git -y",
      " systemctl restart httpd",
      " systemctl enable httpd",
    ]
  } 

tags = {
    Name = "LinuxWorld"
  }
}

output  "output1" {

value = aws_instance.terra1.availability_zone

}


//Provides a security group resource
resource "aws_security_group"  "sg1" {
 
name = "sg1"
  
description = "Allows TCP inbound traffic"
  
vpc_id = "vpc-14gry3rg"


  

ingress {
   
description = "SSH"
    
from_port = 22
   
to_port = 22
  
protocol  = "tcp"
    
cidr_blocks = [ "0.0.0.0/0" ]
  
}

  

ingress {
    
description = "HTTP"
    
from_port = 80
    
to_port = 80
    
protocol = "tcp"
    
cidr_blocks = [ "0.0.0.0/0" ]
  
}

  

egress {
    
from_port = 0
    
to_port = 0
    
protocol = "-1"
    
cidr_blocks = ["0.0.0.0/0"]
  
}


//Manages a single EBS volume....

resource "aws_ebs_volume" "vol" {
  availability_zone = aws_instance.terra1.availability_zone
  size              = 5

    tags = {
    Name = "vol"
  }
}
 


//Provides an AWS EBS Volume Attachment as a top level resource, to attach and detach volumes from AWS Instances.


resource "aws_volume_attachment" "ebsattach" {
  
  device_name = "/dev/sdf"
  volume_id   = aws_ebs_volume.vol.id
  instance_id = aws_instance.terra1.id
  force_detach = true
} 



output "output_vol" {
value = aws_ebs_volume.vol.id
}

output "output_ip" {
value = aws_instance.terra1.public_ip
}


resource "null_resource" "localnull"  {
	
provisioner "local-exec" {
	    
command = "echo  ${aws_instance.terra1.public_ip}  > mypublicip.txt"
  	
}

}



resource "null_resource" "remotenull" {

depends_on = [
aws_volume_attachment.ebsattch,
]

connection {
    
type     = "ssh"
    
user     = "ec2-user"
    
private_key = tls_private_key.terra_key.private_key_pem
host     = aws_instance.terra1.public_ip
  
}

provisioner "remote-exec" {
    
inline = [
      " sudo su"
      " mkfs.ext4  /dev/xvdm",
      
      "mount  /dev/xvdm  /var/www/html",
      
      " rm -rf /var/www/html/*",
      
       " git clone https://github.com/code-sourabh/aws_task1.git   /var/www/html/"
   
 ]
  
}

}




resource "aws_s3_bucket" "s3" {
  bucket = "s3_buck"
  acl     = "public-read"

 provisioner "local-exec" {
        command     = "git clone https://github.com/code-sourabh/aws_task1.git  webpage"
    }

provisioner "local-exec" {
        when        =   destroy
        command     =   "echo Y | rmdir /s  webpage"
    }

}

resource "aws_s3_bucket_object" "image-pull"{

bucket  = aws_s3_bucket.s3.bucket
key     = "effect.jpg"
source  = "bonz/ibm-red-hat-leadspace.png"
acl     = "public-read"

}


//cloud front execution

locals {
  
s3_origin_id = aws_s3_bucket.s3.bucket
  
image_url = "${aws_cloudfront_distribution.s3_distribution.domain_name}/${aws_s3_bucket_object.image-pull.key}"

}

resource "aws_cloudfront_distribution" "s3_distribution" {
  origin {
    domain_name = aws_s3_bucket.s3.bucket_regional_domain_name 
    origin_id   = local.s3_origin_id 

    s3_origin_config {
      origin_access_identity = "origin-access-identity/cloudfront/D31DY653AQWMHU" 
    }
  }


  enabled             = true
  is_ipv6_enabled     = false
  default_root_object = "webpage.php" 


default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }


viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 400
    max_ttl                = 86400
  }

restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

connection {
    
type     = "ssh"
    
user     = "ec2-user"
    
private_key = tls_private_key.terra_key.private_key_pem
host     = aws_instance.terra1.public_ip
  
}

provisioner "remote-exec" {
        inline  = [
            " sudo su"
            " su << EOF",
            "echo \"<img src='http://${self.domain_name}/${aws_s3_bucket_object.image-pull.key}'>\" >> /var/www/html/webpage.html",
            "EOF"
        ]
    }

}




resource "null_resource" "localnull"  {

depends_on = [
    
aws_cloudfront_distribution.s3_distribution,
 ]

	
provisioner "local-exec" {
	    
command = "start firefox  ${aws_instance.terra.public_ip}"
  	
}

}
